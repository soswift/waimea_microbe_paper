permanova_output <- adonis.II(all_dist ~  trophic+site_code+habitat+trophic:site_code+trophic:habitat+habitat:site_code,
data = metadata,
parallel = 2,
permutations = 1000
)
# Multi factor permanova
permanova_output <- adonis.II(all_dist ~  trophic+site_code+habitat+trophic:site_code+trophic:habitat+habitat:site_code,
data = metadata,
parallel = 2,
permutations = 1000
)
grad_permanova_output <- adonis.II(grad_dist ~  empo_3 * trophic * habitat * site_code,
data = grad_data,
parallel = 2,
permutations = 1000
)
# calculate R-squared values
permanova_output <- data.frame(permanova_output)
permanova_output$R2  <-
permanova_output$Sum.Sq / permanova_output$Sum.Sq[nrow(permanova_output)]
grad_permanova_output <- data.frame(grad_permanova_output)
grad_permanova_output$R2  <-
permanova_output$Sum.Sq / grad_permanova_output$Sum.Sq[nrow(grad_permanova_output)]
# calculate R-squared values
permanova_output <- data.frame(permanova_output)
permanova_output$R2  <-
permanova_output$Sum.Sq / permanova_output$Sum.Sq[nrow(permanova_output)]
grad_permanova_output <- data.frame(grad_permanova_output)
grad_permanova_output$R2  <-
grad_permanova_output$Sum.Sq / grad_permanova_output$Sum.Sq[nrow(grad_permanova_output)]
# write out
saveRDS(permanova_output,
"../data/processed/interim/permanova_output.rds")
write.csv(permanova_output,
"outputs/permanova/all_emp3_site_habitat_permanova_table.csv")
# write out
saveRDS(grad_permanova_output,
"../data/processed/interim/grad_permanova_output.rds")
write.csv(grad_permanova_output,
"outputs/permanova/grad_emp3_site_trophic_habitat_permanova_table.csv")
# write out
saveRDS(permanova_output,
"../data/processed/interim/permanova_output.rds")
write.csv(permanova_output,
"outputs/permanova/all_trophic_site_habitat_permanova_table.csv")
# write out
saveRDS(grad_permanova_output,
"../data/processed/interim/grad_permanova_output.rds")
write.csv(grad_permanova_output,
"outputs/permanova/grad_emp3_site_trophic_habitat_permanova_table.csv")
grad_permanova_output$Sum.Sq
grad_permanova_output <- adonis.II(grad_dist ~  trophic+ site_code+ habitat+ empo_3 +
trophic:site_code+trophic:habitat+ trophic:empo_3
habitat:site_code + empo_3:site_code+ habitat:empo_3,
grad_permanova_output <- adonis.II(grad_dist ~  trophic+ site_code+ habitat+ empo_3 +
trophic:site_code+trophic:habitat+ trophic:empo_3 +
habitat:site_code + empo_3:site_code+ habitat:empo_3,
data = grad_data,
parallel = 2,
permutations = 1000
)
data.table(x = 1:200, y = 1:200)
data.table(x = 1:200, y = 1:200) -> dat
dat
dat[sample(1:nrow(dat), 20),]
?dcast
out_file <- "../../toy_data/toy_data/toy_hpc_data.csv"
# read in all OTUs
asv_table <- read_hpc_abund(otu_file)
library(ggplot2)
library(data.table)
library(ggpubr)
# Set up environment -----------------
# get standardized colors for plotting ecological variables
source("get_colors.R")
waimea_colors <- get_waimea_colors()
set.seed(2020)
# set ggplot theme
theme_set(theme_minimal())
# Define functions ---------------------
# read_hpc_abund() is a function for reading and cleaning C-MAIKI pipeline OTU table
read_hpc_abund <- function(abundance_file){
# read in
abundance_table <- fread(abundance_file,nrows = 1000)
# drop extra columns
abundance_table[, c('label','numOtus') :=NULL]
# transpose, keep OTU names
abundance_table <- transpose(abundance_table, keep.names = "OTU_ID", make.names = "Group")
setkey(abundance_table,"OTU_ID")
return(abundance_table)
}
out_file <- "../../toy_data/toy_data/toy_hpc_data.csv"
# read in all OTUs
asv_table <- read_hpc_abund(otu_file)
otu_file <- "../../toy_data/toy_data/toy_hpc_data.csv"
# read in all OTUs
asv_table <- read_hpc_abund(otu_file)
# subset ASVs
keep_cols <- c("OTU_ID", sam_dat$sequencing_id)
x = 1:20
x = sample(1:20, 10)
x
sort(x)
tmp
data.table[ecovar = c("Marine","Terr"), x = c(1,2)]
data.table(ecovar = c("Marine","Terr"), x = c(1,2))
data.table(ecovar = c("Marine","Terr"), x = c(1,2)) -> tmp
tmp[["ecovar"]]
tmp[["ecovar"]][1]
test = 1:10
names(test) <- rep(c("a","b"), each = 5)
test
test["a"]
test[names(test) == "a"]
?ggplot
# when only two levels to the variable
# order bars by one of the levels
dat[ , tmp := as.numeric(as.factor(dat[[an_eco_var]]))]
?hclust
?hclust
# write out
saveRDS(grad_permanova_output,
"../data/processed/interim/grad_permanova_output.rds")
write.csv(grad_permanova_output,
"outputs/permanova/grad_emp3_site_trophic_habitat_permanova_table.csv")
grad_permanova_output
grad_permanova_output <- data.frame(grad_permanova_output)
grad_permanova_output$R2  <-
grad_permanova_output$Sum.Sq / grad_permanova_output$Sum.Sq[nrow(grad_permanova_output)]
grad_permanova_output
# write out
saveRDS(grad_permanova_output,
"../data/processed/interim/grad_permanova_output.rds")
write.csv(grad_permanova_output,
"outputs/permanova/grad_emp3_site_trophic_habitat_permanova_table.csv")
# write out
saveRDS(grad_permanova_output,
"../data/processed/interim/grad_permanova_output.rds")
write.csv(grad_permanova_output,
"outputs/permanova/grad_emp3_site_trophic_habitat_permanova_table.csv")
# write out
saveRDS(permanova_output,
"../data/processed/interim/permanova_output.rds")
write.csv(permanova_output,
"outputs/permanova/all_trophic_site_habitat_permanova_table.csv")
?dcast
library(data.table)
?dcast
?hclust
# Restart here if you need to alter the plots
asv_table <- fread("data/processed/stacked_bars/random_5k_abund_table.csv")
setwd("/home/sean/Documents/Bioinformatics/Projects/Waimea/microbial_mapping/main
")
setwd("/home/sean/Documents/Bioinformatics/Projects/Waimea/microbial_mapping/main")
# Restart here if you need to alter the plots
asv_table <- fread("../data/processed/stacked_bars/random_5k_abund_table.csv")
# reshape data into long format for ggplot
long_asvs <- melt.data.table(asv_table,
id.vars = "OTU_ID",
variable.name = "sequencing_id",
value.name = "rel_abund")
asv_table
# Restart here if you need to alter the plots
asv_table <- fread("../data/processed/stacked_bars/random_5k_abund_table.csv", header = T)
# reshape data into long format for ggplot
long_asvs <- melt.data.table(asv_table,
id.vars = "OTU_ID",
variable.name = "sequencing_id",
value.name = "rel_abund")
# identify relevant sample data for filling stacked barplots
eco_vars <-c("sequencing_id", "habitat", "trophic", "empo_1", "empo_2", "empo_3", "site_name")
asvs_w_meta <- merge(long_asvs, sam_dat[ , ..eco_vars])
eco_plots <-  mclapply(
X = eco_vars[-1],
FUN = function(an_eco_var) {
print(an_eco_var)
dat <- copy(asvs_w_meta)
# sum by eco_var
dat <- dat[ ,.(sum_rel_abund = sum(rel_abund)), by = c(an_eco_var, "OTU_ID")]
# order the bars by distribution across multiple factors (distance matrix + hclust)
cast_f <- as.formula(paste("OTU_ID ~", an_eco_var))
wide <- dcast(dat, cast_f, value.var = "sum_rel_abund")
wide_mat <- as.matrix(wide[ , -1])
row.names(wide_mat) <- wide[ , OTU_ID]
print("clustering")
bar_order <- hclust(d = dist(wide_mat), method = "ward.D")
dat[ , OTU_ID := factor(OTU_ID, levels = bar_order$labels[bar_order$order])]
print("plotting")
# Plot the stacked bars
p <- ggplot(dat, aes_(x = quote(OTU_ID),
y = quote(sum_rel_abund),
fill = as.name(an_eco_var))) +
geom_bar(position = "fill", stat = "identity") +
labs(x = "ASVs", y = "Percent Of Total Relative Abundance")+
# Standardized color scheme
scale_fill_manual(values = waimea_colors, drop = T) +
theme_pubclean()+
theme(axis.text.x = element_blank() ,
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right")
print("saving")
ggsave(
filename = paste0(an_eco_var, "_stacked_barplot.pdf"),
width = 10,
heigh = 7,
plot = p )
return(p)
}
)
library(parallel)
library(ggplot2)
library(data.table)
library(ggpubr)
library(parallel)
# Set up environment -----------------
# get standardized colors for plotting ecological variables
source("../src/get_colors.R")
waimea_colors <- get_waimea_colors()
# params
set.seed(2020)
options(mc.cores = parallel::detectCores() -1)
# set ggplot theme
theme_set(theme_minimal())
eco_plots <-  mclapply(
X = eco_vars[-1],
FUN = function(an_eco_var) {
print(an_eco_var)
dat <- copy(asvs_w_meta)
# sum by eco_var
dat <- dat[ ,.(sum_rel_abund = sum(rel_abund)), by = c(an_eco_var, "OTU_ID")]
# order the bars by distribution across multiple factors (distance matrix + hclust)
cast_f <- as.formula(paste("OTU_ID ~", an_eco_var))
wide <- dcast(dat, cast_f, value.var = "sum_rel_abund")
wide_mat <- as.matrix(wide[ , -1])
row.names(wide_mat) <- wide[ , OTU_ID]
print("clustering")
bar_order <- hclust(d = dist(wide_mat), method = "ward.D")
dat[ , OTU_ID := factor(OTU_ID, levels = bar_order$labels[bar_order$order])]
print("plotting")
# Plot the stacked bars
p <- ggplot(dat, aes_(x = quote(OTU_ID),
y = quote(sum_rel_abund),
fill = as.name(an_eco_var))) +
geom_bar(position = "fill", stat = "identity") +
labs(x = "ASVs", y = "Percent Of Total Relative Abundance")+
# Standardized color scheme
scale_fill_manual(values = waimea_colors, drop = T) +
theme_pubclean()+
theme(axis.text.x = element_blank() ,
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right")
print("saving")
ggsave(
filename = paste0(an_eco_var, "_stacked_barplot.pdf"),
width = 10,
heigh = 7,
plot = p )
return(p)
}
)
an_eco_var
an_eco_var = "habitat"
asvs_w_meta
# identify relevant sample data for filling stacked barplots
eco_vars <-c("sequencing_id", "habitat", "trophic", "empo_1", "empo_2", "empo_3", "site_name")
asvs_w_meta <- merge(long_asvs, sam_dat[ , ..eco_vars])
# Restart by reading in the intermediate file if you need to alter the plots
asvs_w_meta <- fread("../data/processed/stacked_bars/random_5k_asvs.csv", header = T)
# Restart by reading in the intermediate file if you need to alter the plots
asvs_w_meta <- fread("../data/processed/stacked_bars/random_5k_asvs.csv", header = T)
eco_plots <-  mclapply(
X = eco_vars[-1],
FUN = function(an_eco_var) {
print(an_eco_var)
dat <- copy(asvs_w_meta)
# sum by eco_var
dat <- dat[ ,.(sum_rel_abund = sum(rel_abund)), by = c(an_eco_var, "OTU_ID")]
# order the bars by distribution across multiple factors (distance matrix + hclust)
cast_f <- as.formula(paste("OTU_ID ~", an_eco_var))
wide <- dcast(dat, cast_f, value.var = "sum_rel_abund")
wide_mat <- as.matrix(wide[ , -1])
row.names(wide_mat) <- wide[ , OTU_ID]
print("clustering")
bar_order <- hclust(d = dist(wide_mat), method = "ward.D")
dat[ , OTU_ID := factor(OTU_ID, levels = bar_order$labels[bar_order$order])]
print("plotting")
# Plot the stacked bars
p <- ggplot(dat, aes_(x = quote(OTU_ID),
y = quote(sum_rel_abund),
fill = as.name(an_eco_var))) +
geom_bar(position = "fill", stat = "identity") +
labs(x = "ASVs", y = "Percent Of Total Relative Abundance")+
# Standardized color scheme
scale_fill_manual(values = waimea_colors, drop = T) +
theme_pubclean()+
theme(axis.text.x = element_blank() ,
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right")
print("saving")
ggsave(
filename = paste0(an_eco_var, "_stacked_barplot.pdf"),
width = 10,
heigh = 7,
plot = p )
return(p)
}
)
eco_plots <-  lapply(
X = eco_vars[-1],
FUN = function(an_eco_var) {
print(an_eco_var)
dat <- copy(asvs_w_meta)
# sum by eco_var
dat <- dat[ ,.(sum_rel_abund = sum(rel_abund)), by = c(an_eco_var, "OTU_ID")]
# order the bars by distribution across multiple factors (distance matrix + hclust)
cast_f <- as.formula(paste("OTU_ID ~", an_eco_var))
wide <- dcast(dat, cast_f, value.var = "sum_rel_abund")
wide_mat <- as.matrix(wide[ , -1])
row.names(wide_mat) <- wide[ , OTU_ID]
print("clustering")
bar_order <- hclust(d = dist(wide_mat), method = "ward.D")
dat[ , OTU_ID := factor(OTU_ID, levels = bar_order$labels[bar_order$order])]
print("plotting")
# Plot the stacked bars
p <- ggplot(dat, aes_(x = quote(OTU_ID),
y = quote(sum_rel_abund),
fill = as.name(an_eco_var))) +
geom_bar(position = "fill", stat = "identity") +
labs(x = "ASVs", y = "Percent Of Total Relative Abundance")+
# Standardized color scheme
scale_fill_manual(values = waimea_colors, drop = T) +
theme_pubclean()+
theme(axis.text.x = element_blank() ,
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right")
print("saving")
ggsave(
filename = paste0(an_eco_var, "_stacked_barplot.pdf"),
width = 10,
heigh = 7,
plot = p )
return(p)
}
)
saveRDS(eco_plots, "../data/processed/stacked_bars/plots.rds")
# convert plot to grob
stack_grobs <-mclapply(eco_plots, ggplotGrob)
# set a standard width for all grobs
std_width <- stack_grobs[[1]]$widths
stack_std <- lapply(stack_grobs, function(x) {
x$widths <- std_width
return(x)})
# arrange ordinations
g <- ggarrange(plotlist=stack_std,
nrow = 3, ncol = 2)
ggsave("facet_stacked_barplot.pdf",
plot = g,
width = 10,
height = 15)
eco_plots <-  lapply(
X = eco_vars[-1],
FUN = function(an_eco_var) {
print(an_eco_var)
dat <- copy(asvs_w_meta)
# sum by eco_var
dat <- dat[ ,.(sum_rel_abund = sum(rel_abund)), by = c(an_eco_var, "OTU_ID")]
# order the bars by distribution across multiple factors (distance matrix + hclust)
cast_f <- as.formula(paste("OTU_ID ~", an_eco_var))
wide <- dcast(dat, cast_f, value.var = "sum_rel_abund")
wide_mat <- as.matrix(wide[ , -1])
row.names(wide_mat) <- wide[ , OTU_ID]
print("clustering")
bar_order <- hclust(d = dist(wide_mat), method = "ward.D")
dat[ , OTU_ID := factor(OTU_ID, levels = bar_order$labels[bar_order$order])]
print("plotting")
# Plot the stacked bars
p <- ggplot(dat, aes_(x = quote(OTU_ID),
y = quote(sum_rel_abund),
fill = as.name(an_eco_var))) +
geom_bar(position = "fill", stat = "identity") +
labs(x = "ASVs", y = "Percent Of Total Reads")+
# Standardized color scheme
scale_fill_manual(values = waimea_colors, drop = T) +
theme_pubclean()+
theme(axis.text.x = element_blank() ,
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right")
print("saving")
ggsave(
filename = paste0("outputs/stacked_barplots/full_data_subset/", an_eco_var, "_stacked_barplot.pdf"),
width = 10,
heigh = 7,
plot = p )
return(p)
}
)
saveRDS(eco_plots, "../data/processed/stacked_bars/plots.rds")
# convert plot to grob
stack_grobs <-mclapply(eco_plots, ggplotGrob)
# set a standard width for all grobs
std_width <- stack_grobs[[1]]$widths
stack_std <- lapply(stack_grobs, function(x) {
x$widths <- std_width
return(x)})
# arrange ordinations
g <- ggarrange(plotlist=stack_std,
nrow = 3, ncol = 2)
ggsave("outputs/stacked_barplots/full_data_subset/facet_stacked_barplot.pdf",
plot = g,
width = 10,
height = 15)
library(data.table)
data.table(x = 1:20, y = 2:22)
data.table(x = 1:20, y = 2:21)
data.table(x = 1:20, y = 2:21) -> dat
dat
apply(dat, 2, function(x), any(x > 5))
apply(dat, 2, function(x) any(x > 5))
apply(dat, 1, function(x) any(x > 5))
apply(dat, 1, function(x) any(x > 5)) -> tmp
tmp[isTRUE(tmp)]
tmp[tmp == T]
?isTRUE
library(ggplot2)
library(ggpubr)
library(phyloseq)
library(data.table)
library(viridisLite)
library(vegan)
library(RVAideMemoire)
set.seed(seed = 2020)
# set output directory
out_dir <- file.path("outputs","nmds")
# source function for retrieving waimea color palette
source("../src/get_colors.R")
# set ggplot theme
theme_set(theme_bw())
# get color palettes
trophic_colors <- get_waimea_colors(cat_type = "trophic")
habitat_colors <- get_waimea_colors(cat_type = "habitat")
emp_colors     <- get_waimea_colors(cat_type = "emp")
# set log transformed color palette for gradient values (e.g. elevation)
pal_c = "plasma"
uniform_gradient_color <- function(palname = pal_c, ...){
scale_color_viridis_c(option = palname, trans = "log", ...)
}
MM_16S_phy <- readRDS("../data/processed/cleaned/MM_16S_phy.rds")
MM_16S_phy
meta <- as(as(sample_data(MM_16S_phy), "data.frame"), "data.table")
# summarize sampling effort by site
sample_number_by_site <- meta[,
.N,
by = .(site_name, habitat)][order(site_name, habitat)]
fwrite(sample_number_by_site, "../data/processed/interim/sample_number_by_site.csv")
sample_number_by_site
metadata <- as(sample_data(MM_16S_phy), "data.frame")
all_dist <- distance(MM_16S_phy, method="bray")
metadata <- as(sample_data(MM_16S_phy), "data.frame")
all_dist <- distance(MM_16S_phy, method="bray")
# All sites & samples included
# run permanovas using type 2 sum of squares (adonis.II)
perm_aovs <- list()
# Only gradient sites (i.e. no marine samples)
grad_phy <- subset_samples(MM_16S_phy, habitat !="Marine")
grad_data <- as(sample_data(grad_phy), "data.frame")
grad_dist <- distance(grad_phy, method = "bray")
grad_permanova_output <- adonis.II(grad_dist ~  empo_3 + site_code + habitat + # main effets
empo_3:site_code+ empo_3:habitat + habitat:site_code , #interactoins
data = grad_data,
parallel = 2,
permutations = 1000
)
grad_permanova_output <- adonis.II(grad_dist ~  empo_3 + site_code + habitat + # main effets
empo_3:site_code+ empo_3:habitat + habitat:site_code , #interactoins
data = grad_data,
parallel = 2,
permutations = 1000
)
# calculate R-squared values
grad_permanova_output <- data.frame(grad_permanova_output)
grad_permanova_output$R2  <-
grad_permanova_output$Sum.Sq / grad_permanova_output$Sum.Sq[nrow(grad_permanova_output)]
# write out
saveRDS(grad_permanova_output,
"../data/processed/interim/grad_permanova_output.rds")
write.csv(grad_permanova_output,
"outputs/permanova/grad_emp3_site_trophic_habitat_permanova_table.csv")
grad_permanova_output
# calculate R-squared values
grad_permanova_output <- data.frame(grad_permanova_output)
grad_permanova_output$R2  <-
grad_permanova_output$Sum.Sq / grad_permanova_output$Sum.Sq[nrow(grad_permanova_output)]
# write out
saveRDS(grad_permanova_output,
"../data/processed/interim/grad_permanova_output.rds")
write.csv(grad_permanova_output,
"outputs/permanova/grad_emp3_site_trophic_habitat_permanova_table.csv")
