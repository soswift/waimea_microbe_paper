var_ranges_dt[, group := factor(group, levels = var_list[[var_name]])]
fwrite(var_ranges_dt, paste0("../data/processed/",var_name,"_ASV_lat_ranges.csv"))
# set up comparisons based on number of unique values
comps <- get_comparisons(var_ranges_dt$group)
p <-
ggplot(var_ranges_dt, aes(x = group, y = range_coord, fill = group)) +
geom_boxplot(outlier.shape = NA) +
#geom_jitter(width = .2) +
theme_pubr() +
ylab("ASV Latitudinal Range") +
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank(),
legend.title = element_blank()
) +
labs(title = paste0("ASV ranges by ", var_name))
# just do this part after the fact
p
print(paste("saving", var_name, "plot"))
ggsave(
paste0("../outputs/figures/ASV_ranges_by_", var_name, ".png"),
plot = p,
width = 10,
height = 5
)
#Pull out range and group count mean/sd for each habitat
range_summary <- var_ranges_dt[, .(
mean_range = mean(range_coord),
sd_range = sd(range_coord),
mean_types = mean(group_count),
sd_types = sd(group_count)
),
by = group]
return(list(
plot = p,
summary = range_summary,
ranges = var_ranges_dt
))
})
names(ranges_out) <- names(var_list)
# Gradient Site Range Regression ------------------------------
# Generate a regression of ASV ranges by sampling site going up the gradient
# get ASV ranges for a given variable
site_ranges <- ranges_out$site_name$ranges
setnames(site_ranges, "group", "site_name")
# drop marine sites
site_ranges <- site_ranges[site_name %in% wai_meta[habitat != "Marine", site_name] ]
site_ranges[ , site_name := droplevels(site_name)]
site_ranges <- merge(site_ranges, site_meta)
## Plot means as points -----------------
# There are too many points to see any trends in a scatter plot.
# Instead, plot the means at each level (e.g. elevational range value) and add histograms.
# 1. Latitudinal range vs. elevational range = do ASVs distribute across waimea like they do global?
# 2. Max latitude vs. max elevation = are elevation/latitude limiting for ASVs?
# 3. Sample occupancy vs. max elevation = if elevation limits, are tolerant ASVs more common?
# 4. Latitudinal range vs. ASV elevation observed = do waimea sites look like global sites?
# Ranges and maxima are attributes that can be tied to each ASVs
# We also look at ASVs within a site, which repeatedly counts ASVs that occur in multiple.
# function add_histo() adds histograms to a correlation plot
add_histos <- function(main_plot,y_col, x_col, plot_data) {
# set X axis to full data range
# set plot limits
main_plot <- main_plot +
xlim(range(plot_data[[x_col]]))
# define plot limits
x_min <- min(main_plot$data[[1]])
x_max <- max(main_plot$data[[1]])
y_min <- min(main_plot$data[[2]]) # assumes col 3 is standard deviation
y_max <- max(main_plot$data[[2]])
# Histogram plot for X axis
xplot <- gghistogram(plot_data, x_col, fill = "gray") +
clean_theme() +
scale_y_reverse()
# Histogram plot Y axis
# since y axis is dynamic, highlight plotted area for y histogram and inset
yplot <- gghistogram(plot_data, y_col, fill = "gray", add = "mean")+
annotate("rect",
xmin = y_min,
xmax = y_max,
ymin = 0,
ymax = Inf,
alpha = .2,
fill = "blue")+
clean_theme()+
rotate()
# identify mean so it can be added to main plot
mean_val <- mean(plot_data[[y_col]])
# define offset for insert placement
x_offset <- (x_max - x_min) * 0.15
y_offset <- (y_max - y_min) * 0.60
# Insert grob inside the scatter plot (x and y swap because of rotated plot)
yplot_grob <- ggplotGrob(yplot)
ann_plot <- main_plot +
annotation_custom(grob = yplot_grob,
xmin = x_min,
xmax = x_min + x_offset,
ymin = y_min + y_offset,
ymax = y_max)+
geom_line(y = mean_val,
linetype = "longdash")   # Add a matching mean line to the main plot
# Arrange alongside the plot
plot_arr <- ggarrange(
ann_plot,
xplot,
nrow = 2, align = "hv",
heights = c(3,1),
widths = 3,
common.legend = TRUE
)
plot_arr
return(plot_arr)
}
# 1. Mean latitudinal range vs elevational range
# Does elevational range of an ASV predict latitudinal range?
r_lat_by_r_el <- non_local[ , mean(range_coord), by = range_elev]
p_r_el <- ggplot(r_lat_by_r_el,
aes(x = range_elev,
y = V1)) +
geom_point(size = 2) +
stat_smooth(method = "lm", se = F) +
labs(y = "Mean(ASV Latitudinal Range)",
x = "ASV Elevational Range") +
theme_pubr()
r_el_arr <- add_histos(main_plot = p_r_el,
x_col = "range_elev",
y_col = "range_coord",
plot_data = non_local)
r_el_arr
ggsave("../outputs/figures/ASV_lat_range_by_elev_range.png",
plot = r_el_arr, width = 5, height = 4)
# 2. Maximum latitude vs maximum elevation
# Does maximum elevation of an ASV predict maximum latitude?
m_lat_by_m_el <- non_local[ , mean(coord_max), by = elev_max]
p_m_el <- ggplot(m_lat_by_m_el,
aes(x = elev_max,
y = V1)) +
geom_point(size = 2) +
stat_smooth(method = "lm", se = F) +
labs(y = "Mean (ASV Max Latitude)",
x= "ASV Maximum Elevation") +
theme_pubr()
m_el_arr <- add_histos(main_plot = p_m_el,
x_col = "elev_max",
y_col = "coord_max",
plot_data = non_local)
m_el_arr
ggsave("../outputs/figures/Max_ASV_lat_by_max_elev.png", plot = m_el_arr, width = 5, height = 4)
# 3. Sample occupancy vs maximum elevation
# Does max elevation of ASV predict it's spread across samples?
# log transform occupancy for scale
m_occ_by_m_el <- non_local[ , mean(log_occupancy),
by =   elev_max]
p_occ_el <- ggplot(m_occ_by_m_el, aes(x = elev_max, y = V1)) +
geom_point(size = 2) +
stat_smooth(method = "lm", se = F) +
labs(y = "Mean( log( ASV Sample Occupancy))",
x= "ASV Maximum Elevation") +
theme_pubr()
p_occ_el
occ_el_arr <- add_histos(main_plot = p_occ_el,
x_col = "elev_max",
y_col = "log_occupancy",
plot_data = non_local)
occ_el_arr
ggsave("../outputs/figures/ASV_lat_range_by_elev_range.png",
plot = r_el_arr, width = 5, height = 4)
# 4. Latitude range vs elevation occured
# Does the elevation an ASV is observed at predict latitudinal range?
# ASVs by non-marine site
non_local_site <- site_ranges[local == F]
r_lat_by_s_el <- non_local_site[ , mean(range_coord), by = elevation]
p_lat_s_el <- ggplot(r_lat_by_s_el,
aes(x = elevation,
y = V1)) +
geom_point(size = 2) +
stat_smooth(method = "lm", se = F) +
labs(y = "Mean (ASV Latitudinal Range)", x= "ASV Elevation Occured") +
theme_pubr()
p_lat_s_el
lat_s_el_arr <- add_histos(main_plot = p_lat_s_el,
x_col = "elevation",
y_col = "range_coord",
plot_data = non_local_site)
lat_s_el_arr
ggsave("../outputs/figures/ASV_lat_range_by_elev_occured.png",
plot = lat_s_el_arr, width = 5, height = 4)
# Facet all plots --------------
grobs <-lapply(list( r_el_arr,
lat_s_el_arr,
m_el_arr,
occ_el_arr),
ggplotGrob)
g <- ggarrange(plotlist=grobs,
labels = "AUTO",
nrow = 2,
ncol = 2)
g
ggsave(paste0("../outputs/figures/ASV_elev_range_facet.pdf"),
plot = g,
width = 8.5,
height = 11)
g <- ggarrange(plotlist=grobs,
labels = as.list(letters[1:4]),
nrow = 2,
ncol = 2)
g
ggsave(paste0("../outputs/figures/ASV_elev_range_facet.pdf"),
plot = g,
width = 8.5,
height = 11)
rm(list=ls())
library(data.table)
library(phyloseq)
library(speedyseq)
library(vegan)
library(ComplexHeatmap)
library(dendextend)
library(dendsort)
library(viridisLite)
library(circlize)
library(dynamicTreeCut)
source("../src/get_colors.R")
emp_colors <- get_waimea_colors()
set.seed(2020)
# standard phyloseq object containing CMAIKI pipeline data
MM_16S_phy <- readRDS("../data/processed/cleaned/MM_16S_phy.rds")
# simplify trophic levels to Environmental, PrimaryProducer, and Consumer
sample_data(MM_16S_phy)$trophic[!(sample_data(MM_16S_phy)$trophic %in%
c("Environmental", "PrimaryProducer"))] <- "Consumer"
# pull out OTU data and hellinger transform
all_otus <- t(as(otu_table(MM_16S_phy), "matrix"))
all_otus <- decostand(all_otus, method = "hellinger")
# pull out metadata
all_meta <- as(sample_data(MM_16S_phy), "data.frame")
# pull out taxonomy
all_tax <- as.data.frame(MM_16S_phy@tax_table@.Data)
all_tax$asv_name <- row.names(all_tax)
# make list of habitats
habitat_list <- unique(all_meta$habitat)
complex_heatmap <-
function(group,
metadata_column,
otus = all_otus,
meta = all_meta,
tax = all_tax,
zscale = T,
row_names = T,
description = NULL)   {
# group = "Marine"
# metadata_column = "habitat"
#     otus = all_otus
#        meta = all_meta
#        tax = all_tax
#        zscale = T
#        description = NULL
# filter metadata where selected metadata column matches the group
group_meta <- all_meta[all_meta[[metadata_column]] %in% group,]
# subset otus to match metadata
group_otus <-
otus[match(group_meta$sequencing_id, row.names(otus)),]
group_otus <-
group_otus[rowSums(group_otus) > 0, colSums(group_otus) > 0]
# subset taxonomy to match otus
group_tax <- tax[match(colnames(group_otus), tax$asv_name),]
# update row names to include sample types
new_names <-
paste(group_meta$sequencing_id,
group_meta$sample_type, sep = "_")
row.names(group_otus) <- new_names
# construct heatmap annotation
## EMP ontology categorical annotation and ASV topics barplot
ha_row <- rowAnnotation(
EMPO_3 = group_meta$empo_3,
EMPO_2 = group_meta$empo_2,
EMPO_1 = group_meta$empo_1,
Habitat = group_meta$habitat,
col = list(Habitat = emp_colors,
EMPO_1  = emp_colors,
EMPO_2  = emp_colors,
EMPO_3  = emp_colors)
)
# # Uncomment for bacterial Phylum annotations
# ha_col <- columnAnnotation(
#   Phylum = group_tax$phylum
# )
#
# create custom dendrogram with bray distance and sort it to better show close relationships
row_dist <- vegdist(group_otus, method = "bray")
row_clust <- hclust(row_dist , method = "average")
row_dendro <- dendsort(as.dendrogram(row_clust))
# scale ASV abundance for plot visualization
if(isTRUE(zscale)){
group_otus <- scale(group_otus)
}
# define color function
col_fun = colorRamp2(breaks = c(-1,0,1,10), viridis(4))
# contruct heatmap
ht <- Heatmap(
group_otus,
col = col_fun,
border = T,
heatmap_legend_param = list(title = "Scaled Rel. Abund"),
column_dend_height = unit(1, "in"),
row_dend_width = unit(1, "in"),
cluster_rows = row_dendro,
show_column_names =  F,
show_row_names = row_names,
#top_annotation =  ha_col,
left_annotation = ha_row,
row_names_gp = gpar(fontsize = 3)
)
# return heatmap object
return(ht)
}
complex_heatmap <-
function(group,
metadata_column,
otus = all_otus,
meta = all_meta,
tax = all_tax,
zscale = T,
row_names = T,
description = NULL)   {
# group = "Marine"
# metadata_column = "habitat"
#     otus = all_otus
#        meta = all_meta
#        tax = all_tax
#        zscale = T
#        description = NULL
# filter metadata where selected metadata column matches the group
group_meta <- all_meta[all_meta[[metadata_column]] %in% group,]
# subset otus to match metadata
group_otus <-
otus[match(group_meta$sequencing_id, row.names(otus)),]
group_otus <-
group_otus[rowSums(group_otus) > 0, colSums(group_otus) > 0]
# subset taxonomy to match otus
group_tax <- tax[match(colnames(group_otus), tax$asv_name),]
# update row names to include sample types
new_names <-
paste(group_meta$sequencing_id,
group_meta$sample_type, sep = "_")
row.names(group_otus) <- new_names
# construct heatmap annotation
## EMP ontology categorical annotation and ASV topics barplot
ha_row <- rowAnnotation(
EMPO_3 = group_meta$empo_3,
EMPO_2 = group_meta$empo_2,
EMPO_1 = group_meta$empo_1,
Habitat = group_meta$habitat,
col = list(Habitat = emp_colors,
EMPO_1  = emp_colors,
EMPO_2  = emp_colors,
EMPO_3  = emp_colors)
)
# # Uncomment for bacterial Phylum annotations
# ha_col <- columnAnnotation(
#   Phylum = group_tax$phylum
# )
#
# create custom dendrogram with bray distance and sort it to better show close relationships
row_dist <- vegdist(group_otus, method = "bray")
row_clust <- hclust(row_dist , method = "average")
row_dendro <- dendsort(as.dendrogram(row_clust))
# scale ASV abundance for plot visualization
if(isTRUE(zscale)){
group_otus <- scale(group_otus)
}
# define color function
col_fun = colorRamp2(breaks = c(-1,0,1,10), viridis(4))
# contruct heatmap
ht <- Heatmap(
group_otus,
col = col_fun,
border = T,
heatmap_legend_param = list(title = "Scaled Rel. Abund"),
column_dend_height = unit(0.5, "in"),
row_dend_width = unit(0.5, "in"),
cluster_rows = row_dendro,
show_column_names =  F,
show_row_names = row_names,
#top_annotation =  ha_col,
left_annotation = ha_row,
row_names_gp = gpar(fontsize = 3)
)
# return heatmap object
return(ht)
}
# z-scaled
all_hts <- complex_heatmap(group = "bacterial16S",
metadata_column = "locus",
row_names = F)
saveRDS(all_hts, "../data/processed/all_hts.rds")
pdf("outputs/heatmap/all_sample_heatmap.pdf",
width = 14,
height = 22)
print(all_hts)
dev.off()
?Heatmap
# z-scaled
all_hts <- complex_heatmap(group = "bacterial16S",
metadata_column = "locus",
row_names = F)
saveRDS(all_hts, "../data/processed/all_hts.rds")
pdf("outputs/heatmap/all_sample_heatmap.pdf",
width = 8.5,
height = 10)
print(all_hts)
dev.off()
complex_heatmap <-
function(group,
metadata_column,
otus = all_otus,
meta = all_meta,
tax = all_tax,
zscale = T,
row_names = T,
description = NULL)   {
# group = "Marine"
# metadata_column = "habitat"
#     otus = all_otus
#        meta = all_meta
#        tax = all_tax
#        zscale = T
#        description = NULL
# filter metadata where selected metadata column matches the group
group_meta <- all_meta[all_meta[[metadata_column]] %in% group,]
# subset otus to match metadata
group_otus <-
otus[match(group_meta$sequencing_id, row.names(otus)),]
group_otus <-
group_otus[rowSums(group_otus) > 0, colSums(group_otus) > 0]
# subset taxonomy to match otus
group_tax <- tax[match(colnames(group_otus), tax$asv_name),]
# update row names to include sample types
new_names <-
paste(group_meta$sequencing_id,
group_meta$sample_type, sep = "_")
row.names(group_otus) <- new_names
# construct heatmap annotation
## EMP ontology categorical annotation and ASV topics barplot
ha_row <- rowAnnotation(
EMPO_3 = group_meta$empo_3,
EMPO_2 = group_meta$empo_2,
EMPO_1 = group_meta$empo_1,
Habitat = group_meta$habitat,
col = list(Habitat = emp_colors,
EMPO_1  = emp_colors,
EMPO_2  = emp_colors,
EMPO_3  = emp_colors)
)
# # Uncomment for bacterial Phylum annotations
# ha_col <- columnAnnotation(
#   Phylum = group_tax$phylum
# )
#
# create custom dendrogram with bray distance and sort it to better show close relationships
row_dist <- vegdist(group_otus, method = "bray")
row_clust <- hclust(row_dist , method = "average")
row_dendro <- dendsort(as.dendrogram(row_clust))
# scale ASV abundance for plot visualization
if(isTRUE(zscale)){
group_otus <- scale(group_otus)
}
# define color function
col_fun = colorRamp2(breaks = c(-1,0,1,10), viridis(4))
# contruct heatmap
ht <- Heatmap(
group_otus,
col = col_fun,
border = T,
heatmap_legend_param = list(title = "Scaled Rel. Abund"),
show_column_dend = F,
show_row_dend = F,
cluster_rows = row_dendro,
show_column_names =  F,
show_row_names = row_names,
#top_annotation =  ha_col,
left_annotation = ha_row,
row_names_gp = gpar(fontsize = 3)
)
# return heatmap object
return(ht)
}
hab_hts <- lapply(habitat_list,
complex_heatmap,
metadata_column = "habitat")
for( i in seq_along(habitat_list) ){
#plot as PDF file
pdf(
paste0(
"outputs/heatmap/",
habitat_list[i],
"_heatmap.pdf"
),
width = 15,
height = 20
)
print(hab_hts[i])
dev.off()
}
# z-scaled
all_hts <- complex_heatmap(group = "bacterial16S",
metadata_column = "locus",
row_names = F)
saveRDS(all_hts, "../data/processed/all_hts.rds")
pdf("outputs/heatmap/all_sample_heatmap.pdf",
width = 8.5,
height = 10)
print(all_hts)
dev.off()
