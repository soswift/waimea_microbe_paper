# All ASV occupancies and abundances
read.csv("../../data/processed/all_ASV_occupancy_abundance.csv", header = T)
# All ASV occupancies and abundances
occc_abund <-read.csv("../../data/processed/all_ASV_occupancy_abundance.csv", header = T)
# All ASV occupancies and abundances
occ_abund <-read.csv("../../data/processed/all_ASV_occupancy_abundance.csv", header = T)
## Occupancy (presence in samples) vs. Abundance (total sequences) for ASVs
plot(x = occ_abund$occupancy, y = occc_abund$abundance)
## Occupancy (presence in samples) vs. Abundance (total sequences) for ASVs
plot(x = occ_abund$occupancy, y = log(occc_abund$abundance))
## Occupancy (presence in samples) vs. Abundance (total sequences) for ASVs
plot(x = log(occ_abund$occupancy), y = log(occ_abund$abundance))
library(data.table)
library(phyloseq)
library(speedyseq)
library(vegan)
library(pheatmap)
library(ComplexHeatmap)
library(dendextend)
library(dendsort)
library(viridisLite)
library(dynamicTreeCut)
source("../src/get_colors.R")
emp_colors <- get_waimea_colors(cat_typ = "emp")
set.seed(2020)
# standard phyloseq object containing CMAIKI pipeline data
MM_16S_phy <- readRDS("../data/processed/cleaned/MM_16S_phy.rds")
# simplify trophic levels to Environmental, PrimaryProducer, and Consumer
sample_data(MM_16S_phy)$trophic[!(sample_data(MM_16S_phy)$trophic %in%
c("Environmental", "PrimaryProducer"))] <- "Consumer"
# pull out OTU data and hellinger transform
all_otus <- t(as(otu_table(MM_16S_phy), "matrix"))
all_otus <- decostand(all_otus, method = "hellinger")
# pull out metadata
all_meta <- as(sample_data(MM_16S_phy), "data.frame")
# pull out taxonomy
all_tax <- as.data.frame(MM_16S_phy@tax_table@.Data)
all_tax$asv_name <- row.names(all_tax)
# make list of habitats
habitat_list <- unique(all_meta$habitat)
rm(MM_16S_phy)
complex_heatmap <-
function(group,
metadata_column,
otus = all_otus,
meta = all_meta,
tax = all_tax,
zscale = T,
description = NULL)   {
# group = "Marine"
# metadata_column = "habitat"
#     otus = all_otus
#        meta = all_meta
#        tax = all_tax
#        zscale = T
#        description = NULL
# filter metadata where selected metadata column matches the group
group_meta <- all_meta[all_meta[[metadata_column]] %in% group,]
# subset otus to match metadata
group_otus <-
otus[match(group_meta$sequencing_id, row.names(otus)),]
group_otus <-
group_otus[rowSums(group_otus) > 0, colSums(group_otus) > 0]
# subset taxonomy to match otus
group_tax <- tax[match(colnames(group_otus), tax$asv_name),]
# update row names to include sample types
new_names <-
paste(group_meta$sequencing_id,
group_meta$sample_type, sep = "_")
row.names(group_otus) <- new_names
# construct heatmap annotation
## EMP ontology categorical annotation and ASV topics barplot
ha_row <- rowAnnotation(
EMPO_3 = group_meta$empo_3,
EMPO_2 = group_meta$empo_2,
EMPO_1 = group_meta$empo_1,
col = list(EMPO_1 = emp_colors, EMPO_2 = emp_colors, EMPO_3 = emp_colors)
)
# # Uncomment for bacterial Phylum annotations
# ha_col <- columnAnnotation(
#   Phylum = group_tax$phylum
# )
#
# create custom dendrogram with bray distance and sort it to better show close relationships
row_dist <- vegdist(group_otus, method = "bray")
row_clust <- hclust(row_dist , method = "average")
row_dendro <- dendsort(as.dendrogram(row_clust))
# scale ASV abundance for plot visualization
group_otus_z <- scale(group_otus)
# contruct heatmap
ht <- Heatmap(
group_otus_z,
col = viridis(n = 20),
border = T,
heatmap_legend_param = list(title = "Scaled Rel. Abund"),
column_dend_height = unit(1, "in"),
row_dend_width = unit(1, "in"),
cluster_rows = row_dendro,
show_column_names =  F,
#top_annotation =  ha_col,
left_annotation = ha_row,
row_names_gp = gpar(fontsize = 3)
)
# return heatmap object
return(ht)
}
all_hts <- complex_heatmap(group = "bacterial16S", metadata_column = "locus")
saveRDS(all_hts, "../data/processed/all_hts.rds")
png("outputs/heatmap/all_sample_heatmap.png",
width = 17,
height = 22,
units = "in",
res = 300)
print(all_hts)
dev.off()
complex_heatmap <-
function(group,
metadata_column,
otus = all_otus,
meta = all_meta,
tax = all_tax,
zscale = T,
row_names = T,
description = NULL)   {
# group = "Marine"
# metadata_column = "habitat"
#     otus = all_otus
#        meta = all_meta
#        tax = all_tax
#        zscale = T
#        description = NULL
# filter metadata where selected metadata column matches the group
group_meta <- all_meta[all_meta[[metadata_column]] %in% group,]
# subset otus to match metadata
group_otus <-
otus[match(group_meta$sequencing_id, row.names(otus)),]
group_otus <-
group_otus[rowSums(group_otus) > 0, colSums(group_otus) > 0]
# subset taxonomy to match otus
group_tax <- tax[match(colnames(group_otus), tax$asv_name),]
# update row names to include sample types
new_names <-
paste(group_meta$sequencing_id,
group_meta$sample_type, sep = "_")
row.names(group_otus) <- new_names
# construct heatmap annotation
## EMP ontology categorical annotation and ASV topics barplot
ha_row <- rowAnnotation(
EMPO_3 = group_meta$empo_3,
EMPO_2 = group_meta$empo_2,
EMPO_1 = group_meta$empo_1,
col = list(EMPO_1 = emp_colors, EMPO_2 = emp_colors, EMPO_3 = emp_colors)
)
# # Uncomment for bacterial Phylum annotations
# ha_col <- columnAnnotation(
#   Phylum = group_tax$phylum
# )
#
# create custom dendrogram with bray distance and sort it to better show close relationships
row_dist <- vegdist(group_otus, method = "bray")
row_clust <- hclust(row_dist , method = "average")
row_dendro <- dendsort(as.dendrogram(row_clust))
# scale ASV abundance for plot visualization
group_otus_z <- scale(group_otus)
# contruct heatmap
ht <- Heatmap(
group_otus_z,
col = viridis(n = 20),
border = T,
heatmap_legend_param = list(title = "Scaled Rel. Abund"),
column_dend_height = unit(1, "in"),
row_dend_width = unit(1, "in"),
cluster_rows = row_dendro,
show_column_names =  F,
show_row_names = row_names,
#top_annotation =  ha_col,
left_annotation = ha_row,
row_names_gp = gpar(fontsize = 3)
)
# return heatmap object
return(ht)
}
all_hts <- complex_heatmap(group = "bacterial16S", metadata_column = "locus", row_names = F)
saveRDS(all_hts, "../data/processed/all_hts.rds")
png("outputs/heatmap/all_sample_heatmap.png",
width = 17,
height = 22,
units = "in",
res = 300)
print(all_hts)
dev.off()
all_hts <- complex_heatmap(group = "bacterial16S", metadata_column = "locus", row_names = F)
saveRDS(all_hts, "../data/processed/all_hts.rds")
pdf("outputs/heatmap/all_sample_heatmap.pdf",
width = 17,
height = 22)
print(all_hts)
dev.off()
